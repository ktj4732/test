/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.59
 * Generated at: 2020-11-18 07:41:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("      <table width = \"\" border = \"1\">\r\n");
      out.write("      <tr>\r\n");
      out.write("            <td>개인기본정보id</td>\r\n");
      out.write("\t\t\t<td>사번</td>\r\n");
      out.write("\t\t\t<td>한글성명</td>\r\n");
      out.write("\t\t\t<td>영어성명</td>\r\n");
      out.write("\t\t\t<td>주민등록번호</td>\r\n");
      out.write("\t\t\t<td>생년월일</td>\r\n");
      out.write("\t\t\t<td>성별(gender_code)</td>\r\n");
      out.write("\t\t\t<td>직원유형(employee_type)</td>\r\n");
      out.write("\t\t\t<td>입사일자</td>\r\n");
      out.write("\t\t\t<td>이메일</td>\r\n");
      out.write("\t\t\t<td>생성자</td>\r\n");
      out.write("\t\t\t<td>생성일시</td>\r\n");
      out.write("\t\t\t<td>수정자</td>\r\n");
      out.write("\t\t\t<td>수정일시</td>\r\n");
      out.write("\r\n");
      out.write("      </tr>\r\n");
      out.write("      \r\n");

    //내 db 접속에 사용할 conn 변수
    Connection conn = null;

	//SQL구문을 실행
	Statement stmt = null;
	
	//SQL구문의 실행결과를 저장
	ResultSet rs = null;
	
    //오라클 드라이버 경로 설정
    String driver = "oracle.jdbc.driver.OracleDriver";
    //내 db의 계정 경로 설정
    String url = "jdbc:oracle:thin:@vis122.built1.com:1521:VIS1229";
    //접속 성공,실패 여부 사용시 쓰는 변수
    //Boolean connect = false;
    
 	
    
    //db 접속 코드는 반드시 try~catch문 안에 써줘야함
    try {
        //오라클 드라이버 접속
        Class.forName(driver);
        //데이터베이스 커넥션 생성 - 내 db 접속
        conn = DriverManager.getConnection(url, "cbo1", "cbo1");
        //접속성공시 true 설정
        //connect = true;
        System.out.println("연결시작");
        
        
        String query = "select * from cbo_person_master";
        
       	//Statement 생성
        stmt = conn.createStatement();
        
        //쿼리를 통해 얻은 데이터를 resultset에 넣어준다.
        rs = stmt.executeQuery(query);
        
        //결과셋에 담긴 데이터들 출력
        while (rs.next()) {

      out.write("\t\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("cbo_person_master_id"));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("employee_number"));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("korean_name"));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("english_name"));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("registration_number"));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("birthday").substring(0,10));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("gender_code"));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("employee_type"));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("hiredate").substring(0,10));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("email"));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("creation_by"));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("creation_date"));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("last_update_by"));
      out.write("</td>\r\n");
      out.write("\t        \t<td>");
      out.print(rs.getString("last_update_date"));
      out.write("</td>\r\n");
      out.write("\r\n");
      out.write("\t        \t\r\n");
      out.write("\t       \t</tr>\r\n");
      out.write("       \t</table>\r\n");

        }
        
        //사용한 statement 종료
        stmt.close();
        
      	//사용한 resultset 종료
        rs.close();
        
        //접속 끊기, 끊는 이유 : 항상 db가 연결되어 있으면 접속 오류 및 데이터 충돌이 일어나기 때문 
        conn.close();
        
        System.out.println("연결종료");
    } catch (Exception e) {
        //접속 실패시 false 잡고 예외처리해줌
        //connect = false;
        e.printStackTrace();
    }



      out.write("\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("    ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
